&emsp;&emsp;最开始选用 Python 一直用于数学运算，因为 Python 可以直接在 powershell 里运行，比 Matlab 要方便一些。我们就从数学运算开始吧。


##变量、对象、引用


&emsp;&emsp;首先举个很简单的例子。将a赋值为3。

>$$ a=3 $$

&emsp;&emsp;Python 中赋值分为3个步骤：

>$$ 创建一个对象来表达值3 $$ $$创建一个变量a$$ $$将变量a与对象3相连接$$

&emsp;&emsp;学过 C语言 的  便会发现这个过程便是一个指针。Python 里所有的赋值都类似于创建指针的过程，在 Python 里称这个过程为引用 。
&emsp;&emsp;a=3 这个表达式中包含着三个概念：变量，对象和引用。他们的专业术语解释如下：

>$$变量是一个系统表的元素，拥有指向对象的链接的空间。$$ $$对象是分配的一块内存，有足够的空间去表示他们所代表的值。$$ $$ 引用是自动形成的从变量到对象的指针。$$
##类型属于对象而不是变量
&emsp;&emsp;在 Python 里变量与对象相互独立。让我们来看以下代码：

> \>>>  a=3
\>>>  a= 'heng'
\>>>  a=3.14

&emsp;&emsp;虽然这种写法在 Python 中不被推荐，但是它是可行的。a在第一个式子中为整型，第二个式子中为字符串，第三个式子为浮点型。放心不会报错，因为在 Python 中，类型属于对象，而不是变量。 而三个赋值语句仅仅改变的是 引用 。对于对象毫无影响。
&emsp;&emsp;让例子引领我们继续前行。

 >\>>>  a=3
\>>>  b=a
\>>>  a=4

&emsp;&emsp;运行结果为 a=4 ，b=3 。由这个例子我们可以看出 b=a 这里是将 变量a 的 对象3 赋值给 变量b 。后面的 a=4 改变的不是 对象3 ，仅仅改变了 变量a ，变量b 并没有发生改变。
## 引用在数组中的简要说明
&emsp;&emsp;如果将一个列表赋值给 变量a ，以上规律并不适用。

>\>>>  L1=[1,2,3]
\>>>  L2=L1
\>>>  L1[0]=4

&emsp;&emsp;这里输出结果如下：

>\>>>  L1
[4,2,3]
\>>>  L2
=[4,2,3]

&emsp;&emsp;这里 L1 生成了数组，换句话说 L1 便是数组本身。而 L2=L1 代表着 L2 为 L1 的一个指针。当你不想要这个结果时，请将 L2=L1 改为 L2=L1[:] 这样 L2 便创建了一个独立的新数组，只是值与 L1 相同。
#相等
&emsp;&emsp;很多时候我们想要知道两个数组是否相等，这里有着 == 和 is 两种操作可以实现。

>\>>>  a=1
\>>>  b=1
\>>>  a == b
True
\>>>  a is b
True

>\>>>  A=[1,2,3]
\>>>  B=[1,2,3]
\>>>  A == B
True
\>>>  A is B
False

&emsp;&emsp;这里我们可以看出， == 仅仅检查数组内容是否相同，而 is 检测更为严格，要检查数组内容和数组地址。a 与 b 都是引用创建好的对象1，所以数组内容与数组地址完全一致，而数组每一个都是独立的新数组，所以数组的地址并不相同。

